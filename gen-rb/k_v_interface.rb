#
# Autogenerated by Thrift Compiler (0.9.3)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'k_v_server_types'

module KVInterface
  class Client
    include ::Thrift::Client

    def ping()
      send_ping()
      recv_ping()
    end

    def send_ping()
      send_message('ping', Ping_args)
    end

    def recv_ping()
      result = receive_message(Ping_result)
      return
    end

    def set_element(key, value)
      send_set_element(key, value)
      return recv_set_element()
    end

    def send_set_element(key, value)
      send_message('set_element', Set_element_args, :key => key, :value => value)
    end

    def recv_set_element()
      result = receive_message(Set_element_result)
      return result.success unless result.success.nil?
      raise result.error unless result.error.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'set_element failed: unknown result')
    end

    def del_element(key)
      send_del_element(key)
      return recv_del_element()
    end

    def send_del_element(key)
      send_message('del_element', Del_element_args, :key => key)
    end

    def recv_del_element()
      result = receive_message(Del_element_result)
      return result.success unless result.success.nil?
      raise result.error unless result.error.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'del_element failed: unknown result')
    end

    def get_element(key)
      send_get_element(key)
      return recv_get_element()
    end

    def send_get_element(key)
      send_message('get_element', Get_element_args, :key => key)
    end

    def recv_get_element()
      result = receive_message(Get_element_result)
      return result.success unless result.success.nil?
      raise result.error unless result.error.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_element failed: unknown result')
    end

    def list_elements()
      send_list_elements()
      return recv_list_elements()
    end

    def send_list_elements()
      send_message('list_elements', List_elements_args)
    end

    def recv_list_elements()
      result = receive_message(List_elements_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'list_elements failed: unknown result')
    end

  end

  class Processor
    include ::Thrift::Processor

    def process_ping(seqid, iprot, oprot)
      args = read_args(iprot, Ping_args)
      result = Ping_result.new()
      @handler.ping()
      write_result(result, oprot, 'ping', seqid)
    end

    def process_set_element(seqid, iprot, oprot)
      args = read_args(iprot, Set_element_args)
      result = Set_element_result.new()
      begin
        result.success = @handler.set_element(args.key, args.value)
      rescue ::KVException => error
        result.error = error
      end
      write_result(result, oprot, 'set_element', seqid)
    end

    def process_del_element(seqid, iprot, oprot)
      args = read_args(iprot, Del_element_args)
      result = Del_element_result.new()
      begin
        result.success = @handler.del_element(args.key)
      rescue ::KVException => error
        result.error = error
      end
      write_result(result, oprot, 'del_element', seqid)
    end

    def process_get_element(seqid, iprot, oprot)
      args = read_args(iprot, Get_element_args)
      result = Get_element_result.new()
      begin
        result.success = @handler.get_element(args.key)
      rescue ::KVException => error
        result.error = error
      end
      write_result(result, oprot, 'get_element', seqid)
    end

    def process_list_elements(seqid, iprot, oprot)
      args = read_args(iprot, List_elements_args)
      result = List_elements_result.new()
      result.success = @handler.list_elements()
      write_result(result, oprot, 'list_elements', seqid)
    end

  end

  # HELPER FUNCTIONS AND STRUCTURES

  class Ping_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Ping_result
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Set_element_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    KEY = 1
    VALUE = 2

    FIELDS = {
      KEY => {:type => ::Thrift::Types::STRING, :name => 'key'},
      VALUE => {:type => ::Thrift::Types::STRING, :name => 'value'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Set_element_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    ERROR = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::KVMessage},
      ERROR => {:type => ::Thrift::Types::STRUCT, :name => 'error', :class => ::KVException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Del_element_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    KEY = 1

    FIELDS = {
      KEY => {:type => ::Thrift::Types::STRING, :name => 'key'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Del_element_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    ERROR = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
      ERROR => {:type => ::Thrift::Types::STRUCT, :name => 'error', :class => ::KVException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Get_element_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    KEY = 1

    FIELDS = {
      KEY => {:type => ::Thrift::Types::STRING, :name => 'key'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Get_element_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    ERROR = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'},
      ERROR => {:type => ::Thrift::Types::STRUCT, :name => 'error', :class => ::KVException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class List_elements_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class List_elements_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRING}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

end

